name: Clinicalapp_Backend_API_Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'infra/backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/pipeline-backend.yml'
  pull_request:
    branches:
      - main

jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile Backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
      - name: Setup JDK
        uses: actions/setup-jdk@v4
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Compile Project
        run: |
          cd backend
          ./mvnw clean compile -DskipTests

  build:
    runs-on: ubuntu-latest
    name: Build Backend
    needs: [compile]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
      - name: Setup JDK
        uses: actions/setup-jdk@v4
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Build Project
        run: |
          cd backend
          ./mvnw clean package -DskipTests

  build-image:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-jdk@v4
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Build Project
        run: |
          cd backend
          ./mvnw clean package -DskipTests
      - name: Exctract Project version
        id: extract_version
        run: |
          cd backend
          echo "VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/%//g')" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: infra/backend/Dockerfile
          push: true
          platform: linux/amd64
          tags: ${{ secrets.DOCKER_USERNAME }}/clinicalapp-backend:${{ env.VERSION }}
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ env.VERSION }}
      - name: Set Docker Image Names
        run: |
          echo "BACKEND_IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/clinicalapp-backend:${{ env.VERSION }}" >> $GITHUB_ENV
          # echo "FRONTEND_IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/clinicalapp-frontend:${{ env.VERSION }}" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    name: Deploy Backend
    needs: [build-image]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create SSH Key File
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > keyfile.ppm
      - name: Set Key Permissions
        run: chmod 600 keyfile.ppm
      - name: Check SSH Connection
        run: ssh -i keyfile.ppm -o StrictHostKeyChecking=no ec2-user@${{ secrets.VPS_IP }} "echo SSH connection successful"
      - name: Create Deployment Folder
        run: ssh -i keyfile.ppm -o StrictHostKeyChecking=no ec2-user@${{ secrets.VPS_IP }} "mkdir -p ci-cd"
      - name: Copy Docker Compose File
        run: scp -i keyfile.ppm docker-compose.yml ec2-user@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml
      - name: Set environment variables and deploy
        run: |
          ssh -i keyfile.ppm -o StrictHostKeyChecking=no ec2-user@${{ secrets.VPS_IP }} <<EOF
          export BACKEND_IMAGE_NAME=${{ env.BACKEND_IMAGE_NAME }}
          # export FRONTEND_IMAGE_NAME=${{ env.FRONTEND_IMAGE_NAME }}
          cd ci-cd
          docker-compose -f docker-compose.yml pull -q
          docker-compose -f docker-compose.yml up -d
          EOF
