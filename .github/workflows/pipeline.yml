name: Clinicalapp_Pipeline

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"
      - "frontend/**"
      - "infra/backend/**"
      - "infra/frontend/**"
      - "docker-compose.yml"
      - ".github/workflows/pipeline.yml"
  pull_request:
    branches:
      - main

jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile Backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "corretto"
      - name: Compile Project
        run: |
          cd backend
          ./mvnw clean compile -DskipTests

  build:
    runs-on: ubuntu-latest
    name: Build Backend
    needs: [compile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "corretto"
      - name: Build Project
        run: |
          cd backend
          ./mvnw clean package -DskipTests

  build-image-backend:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "corretto"
      - name: Build Project
        run: |
          cd backend
          ./mvnw clean package -DskipTests
      - name: Exctract Project version
        id: extract_version
        run: |
          cd backend
          echo "VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/%//g')" >> $GITHUB_OUTPUT
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Docker Image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64 --push \
            --tag ${{ secrets.DOCKER_USERNAME }}/clinicalapp-backend:${{ steps.extract_version.outputs.VERSION }} \
            --build-arg PROFILE=dev \
            --build-arg APP_VERSION=${{ steps.extract_version.outputs.VERSION }} \
            -f infra/backend/Dockerfile backend

  build-image-frontend:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-image-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Docker Image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64 --push \
            --tag ${{ secrets.DOCKER_USERNAME }}/clinicalapp-frontend:1.0.0 \
            --build-arg API_URL=${{ secrets.API_URL }} \
            -f infra/frontend/Dockerfile frontend

  deploy:
    runs-on: ubuntu-latest
    name: Deploy Backend & Frontend
    needs: [build-image-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Exctract Project version
        id: extract_version
        run: |
          cd backend
          echo "VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/%//g')" >> $GITHUB_OUTPUT

      - name: Set Docker Image Names
        id: set_image_names
        run: |
          echo "BACKEND_IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/clinicalapp-backend:${{ steps.extract_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          echo "FRONTEND_IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/clinicalapp-frontend:1.0.0" >> $GITHUB_OUTPUT

      - name: Create SSH Key File
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > keyfile.ppm

      - name: Set Key Permissions
        run: chmod 600 keyfile.ppm

      - name: Check SSH Connection
        run: ssh -i keyfile.ppm -o StrictHostKeyChecking=no ec2-user@${{ secrets.VPS_IP }} "echo SSH connection successful"

      - name: Create Deployment Folder
        run: ssh -i keyfile.ppm -o StrictHostKeyChecking=no ec2-user@${{ secrets.VPS_IP }} "mkdir -p ci-cd"

      - name: Copy Docker Compose File
        run: scp -i keyfile.ppm docker-compose.yml ec2-user@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml

      - name: Set environment variables and deploy
        run: |
          ssh -i keyfile.ppm -o StrictHostKeyChecking=no ec2-user@${{ secrets.VPS_IP }} <<EOF
          export BACKEND_IMAGE_NAME=${{ steps.set_image_names.outputs.BACKEND_IMAGE_NAME }}
          export FRONTEND_IMAGE_NAME=${{ steps.set_image_names.outputs.FRONTEND_IMAGE_NAME }}
          cd ci-cd
          docker-compose -f docker-compose.yml pull -q
          docker-compose -f docker-compose.yml up -d
          EOF